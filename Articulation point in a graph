    int timer=0;
     void dfs(int node ,int parent,vector<int>adj[],vector<int>&vis,int tin[],int low[],vector<int>&mark){
         vis[node]=1;
         tin[node]=low[node]=timer;
         timer++;
         int c=0;
         for(auto u:adj[node]){
             if(u==parent)continue;
             if(!vis[u]){
                 c++;
                 dfs(u,node,adj,vis,tin,low,mark);
                 low[node]=min(low[node],low[u]);
                 if(low[u]>=tin[node]&&parent!=-1){
                     mark[node]=1;
                 }
             }
             else low[node]=min(low[node],tin[u]);
         }
         if(c>1&&parent==-1)mark[node]=1;
         
     }
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        // Code here
        vector<int>vis(V,0);
        int tin[V];
        int low[V];
        vector<int>mark(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i,-1,adj,vis,tin,low,mark);
            }
        }
        vector<int>ans;
        for(int i=0;i<V;i++){
            if(mark[i])ans.push_back(i);
        }
        if(ans.size()==0)return {-1};
        return ans;
    }
