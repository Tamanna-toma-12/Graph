stack<int>st;
	void dfs(int i,vector<vector<int>>& adj,vector<int>&vis){
	    vis[i]=1;
	    for(auto u:adj[i]){
	        if(vis[u]==0)dfs(u,adj,vis);
	    }
	    st.push(i);
	   // cout<<i<<endl;
	}
	void dfs1(int i,vector<int>a[],vector<int>&vis){
	    vis[i]=1;
	    for(auto u:a[i]){
	        if(!vis[u])dfs1(u,a,vis);
	    }
	}
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
        //sort by ending time
        vector<int>vis(V,0);
      //  stack<int>st;
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,adj,vis);
            }
        }
        //reverse edge
        vector<int>a[V];
        for(int i=0;i<V;i++){
            vis[i]=0;
            for(auto u:adj[i]){
                a[u].push_back(i);
            }
        }
        ///scc component
     //   for(auto u:st)cout<<u<<" ";
        int ans=0;
        while(!st.empty()){
            int i=st.top();
           // cout<<i<<" ";
            st.pop();
            if(!vis[i]){
                ans++;
                dfs1(i,a,vis);
            }
        }
        return ans;
    }
